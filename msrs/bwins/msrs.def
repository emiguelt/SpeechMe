EXPORTS
	??0Msrs@@AAE@XZ @ 1 NONAME ; Msrs::Msrs(void)
	??0Subject@@IAE@XZ @ 2 NONAME ; Subject::Subject(void)
	??1?$_STLP_alloc_proxy@PAPAVObserver@@PAV1@V?$allocator@PAVObserver@@@std@@@std@@QAE@XZ @ 3 NONAME ; std::_STLP_alloc_proxy<class Observer * *, class Observer *, class std::allocator<class Observer *> >::~_STLP_alloc_proxy<class Observer * *, class Observer *, class std::allocator<class Observer *> >(void)
	??1?$_Vector_base@PAVObserver@@V?$allocator@PAVObserver@@@std@@@std@@QAE@XZ @ 4 NONAME ; std::_Vector_base<class Observer *, class std::allocator<class Observer *> >::~_Vector_base<class Observer *, class std::allocator<class Observer *> >(void)
	??1?$allocator@PAVObserver@@@std@@QAE@XZ @ 5 NONAME ; std::allocator<class Observer *>::~allocator<class Observer *>(void)
	??1?$vector@PAVObserver@@V?$allocator@PAVObserver@@@std@@@std@@QAE@XZ @ 6 NONAME ; std::vector<class Observer *, class std::allocator<class Observer *> >::~vector<class Observer *, class std::allocator<class Observer *> >(void)
	??1Msrs@@UAE@XZ @ 7 NONAME ; Msrs::~Msrs(void)
	??1Subject@@UAE@XZ @ 8 NONAME ; Subject::~Subject(void)
	??2@YAPAXI@Z @ 9 NONAME ; void * operator new(unsigned int)
	??2@YAPAXII@Z @ 10 NONAME ; void * operator new(unsigned int, unsigned int)
	??_EMsrs@@UAE@I@Z @ 11 NONAME ; Msrs::~Msrs(unsigned int)
	??_ESubject@@UAE@I@Z @ 12 NONAME ; Subject::~Subject(unsigned int)
	??_U@YAPAXI@Z @ 13 NONAME ; void * operator new[](unsigned int)
	?Attach@Subject@@UAEXPAVObserver@@@Z @ 14 NONAME ; void Subject::Attach(class Observer *)
	?CleanupCWRuntime@@YAHXZ @ 15 NONAME ; int CleanupCWRuntime(void)
	?Detach@Subject@@UAEXPAVObserver@@@Z @ 16 NONAME ; void Subject::Detach(class Observer *)
	?InitCWRuntime@@YAHXZ @ 17 NONAME ; int InitCWRuntime(void)
	?Notify@Subject@@UAEXXZ @ 18 NONAME ; void Subject::Notify(void)
	?NotifyNewSentece@Subject@@UAEXXZ @ 19 NONAME ; void Subject::NotifyNewSentece(void)
	?_Construct@?$@PAVObserver@@PAV1@@std@@YAXPAPAV1@ABQAV1@@Z @ 20 NONAME ; void std::_Construct<class Observer *, class Observer *>(class Observer * *, class Observer * const const &)
	?_M_insert_overflow@?$vector@PAVObserver@@V?$allocator@PAVObserver@@@std@@@std@@IAEXPAPAVObserver@@ABQAV3@ABU__true_type@2@I_N@Z @ 21 NONAME ; void std::vector<class Observer *, class std::allocator<class Observer *> >::_M_insert_overflow(class Observer * *, class Observer * const const &, struct std::__true_type const &, unsigned int, bool)
	?getInstance@Msrs@@SAPAV1@XZ @ 22 NONAME ; class Msrs * Msrs::getInstance(void)
	?getLastSentence@Msrs@@QAEPBDXZ @ 23 NONAME ; char const * Msrs::getLastSentence(void)
	?getStatus@Msrs@@QAEHXZ @ 24 NONAME ; int Msrs::getStatus(void)
	?go@Msrs@@QAEXXZ @ 25 NONAME ; void Msrs::go(void)
	?initDecoder@Msrs@@QAE_NXZ @ 26 NONAME ; bool Msrs::initDecoder(void)
	?isLiveDecoding@Msrs@@QBE_NXZ @ 27 NONAME ; bool Msrs::isLiveDecoding(void) const
	?recognize_from_microphone@Msrs@@AAEXXZ @ 28 NONAME ; void Msrs::recognize_from_microphone(void)
	?setConfig@Msrs@@QAA_NPAUcmd_ln_s@@PBUarg_s@@HZZ @ 29 NONAME ; bool Msrs::setConfig(struct cmd_ln_s *, struct arg_s const *, int, ...)
	?setLastSentence@Msrs@@QAEXPBD@Z @ 30 NONAME ; void Msrs::setLastSentence(char const *)
	?setLiveDecoding@Msrs@@QAEX_N@Z @ 31 NONAME ; void Msrs::setLiveDecoding(bool)
	?setStatus@Msrs@@AAEXH@Z @ 32 NONAME ; void Msrs::setStatus(int)
	?sighandler@Msrs@@AAEXH@Z @ 33 NONAME ; void Msrs::sighandler(int)
	?sleep_msec@Msrs@@AAEXH@Z @ 34 NONAME ; void Msrs::sleep_msec(int)
	?startLiveDecoding@Msrs@@QAE_NXZ @ 35 NONAME ; bool Msrs::startLiveDecoding(void)
	?start_thread@Msrs@@SAPAXPAX@Z @ 36 NONAME ; void * Msrs::start_thread(void *)
	?stop@Msrs@@QAEXXZ @ 37 NONAME ABSENT ; void Msrs::stop(void)
	?stopLiveDecoding@Msrs@@QAEXXZ @ 38 NONAME ; void Msrs::stopLiveDecoding(void)
	UDiv64 @ 39 NONAME
	_Win32DllMain@12 @ 40 NONAME
	__xp_a @ 41 NONAME
	_alldiv @ 42 NONAME
	_alldvrm @ 43 NONAME
	_allmul @ 44 NONAME
	_allrem @ 45 NONAME
	_allshl @ 46 NONAME
	_allshr @ 47 NONAME
	_aulldiv @ 48 NONAME
	_aulldvrm @ 49 NONAME
	_aullrem @ 50 NONAME
	_aullshr @ 51 NONAME
	_purecall @ 52 NONAME
	udiv64_divby0 @ 53 NONAME
	?uid@@3UTEmulatorImageHeader@@A @ 54 NONAME ; struct TEmulatorImageHeader uid
	?READY@Msrs@@2HA @ 55 NONAME ABSENT ; int Msrs::READY
	?FAIL@Msrs@@2HA @ 56 NONAME ABSENT ; int Msrs::FAIL
	?__xp_a@@3PAP6AXXZA @ 57 NONAME ; void (* *__xp_a)(void)
	?DEListHead@@3PAUSDestructorEntry@@A @ 58 NONAME ; struct SDestructorEntry * DEListHead
	??_7Msrs@@6B@~ @ 59 NONAME ; const Msrs::`vftable'
	?__xp_z@@3PAP6AXXZA @ 60 NONAME ; void (* *__xp_z)(void)
	??_R0?AVSubject@@@8~ @ 61 NONAME ; class Subject `MW RTTI Type Descriptor'
	??_R0?AVMsrs@@@8~ @ 62 NONAME ; class Msrs `MW RTTI Type Descriptor'
	?__xc_a@@3PAP6AXXZA @ 63 NONAME ; void (* *__xc_a)(void)
	?__xc_z@@3PAP6AXXZA @ 64 NONAME ; void (* *__xc_z)(void)
	??_7Subject@@6B@~ @ 65 NONAME ; const Subject::`vftable'
	?instance@Msrs@@0PAV1@A @ 66 NONAME ; class Msrs * Msrs::instance
	?LISTENING@Msrs@@2HA @ 67 NONAME ABSENT ; int Msrs::LISTENING
	?__xi_a@@3PAP6AXXZA @ 68 NONAME ; void (* *__xi_a)(void)
	?__xt_a@@3PAP6AXXZA @ 69 NONAME ; void (* *__xt_a)(void)
	?__xi_z@@3PAP6AXXZA @ 70 NONAME ; void (* *__xi_z)(void)
	?__xt_z@@3PAP6AXXZA @ 71 NONAME ; void (* *__xt_z)(void)
	?STOPPED@Msrs@@2HA @ 72 NONAME ABSENT ; int Msrs::STOPPED
	?PROCESSING@Msrs@@2HA @ 73 NONAME ABSENT ; int Msrs::PROCESSING
	?READY@Msrs@@2HB @ 74 NONAME ; int const Msrs::READY
	?FAIL@Msrs@@2HB @ 75 NONAME ; int const Msrs::FAIL
	?LISTENING@Msrs@@2HB @ 76 NONAME ; int const Msrs::LISTENING
	?STOPPED@Msrs@@2HB @ 77 NONAME ; int const Msrs::STOPPED
	?PROCESSING@Msrs@@2HB @ 78 NONAME ; int const Msrs::PROCESSING

