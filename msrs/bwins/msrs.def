EXPORTS
	??0Msrs@@AAE@XZ @ 1 NONAME ; Msrs::Msrs(void)
	??1Msrs@@UAE@XZ @ 2 NONAME ; Msrs::~Msrs(void)
	??2@YAPAXI@Z @ 3 NONAME ABSENT ; void * operator new(unsigned int)
	??2@YAPAXII@Z @ 4 NONAME ABSENT ; void * operator new(unsigned int, unsigned int)
	??_EMsrs@@UAE@I@Z @ 5 NONAME ; Msrs::~Msrs(unsigned int)
	??_U@YAPAXI@Z @ 6 NONAME ABSENT ; void * operator new[](unsigned int)
	??_V@YAXPAX@Z @ 7 NONAME ABSENT ; void operator delete[](void *)
	?CleanupCWRuntime@@YAHXZ @ 8 NONAME ; int CleanupCWRuntime(void)
	?InitCWRuntime@@YAHXZ @ 9 NONAME ; int InitCWRuntime(void)
	UDiv64 @ 10 NONAME
	_Win32DllMain@12 @ 11 NONAME
	__xp_a @ 12 NONAME
	_alldiv @ 13 NONAME
	_alldvrm @ 14 NONAME
	_allmul @ 15 NONAME
	_allrem @ 16 NONAME
	_allshl @ 17 NONAME
	_allshr @ 18 NONAME
	_aulldiv @ 19 NONAME
	_aulldvrm @ 20 NONAME
	_aullrem @ 21 NONAME
	_aullshr @ 22 NONAME
	_purecall @ 23 NONAME
	udiv64_divby0 @ 24 NONAME
	??_R0?AVMsrs@@@8~ @ 25 NONAME ; class Msrs `MW RTTI Type Descriptor'
	?uid@@3UTEmulatorImageHeader@@A @ 26 NONAME ; struct TEmulatorImageHeader uid
	?__xc_a@@3PAP6AXXZA @ 27 NONAME ; void (* *__xc_a)(void)
	?__xc_z@@3PAP6AXXZA @ 28 NONAME ; void (* *__xc_z)(void)
	?__xi_a@@3PAP6AXXZA @ 29 NONAME ; void (* *__xi_a)(void)
	?__xt_a@@3PAP6AXXZA @ 30 NONAME ; void (* *__xt_a)(void)
	?__xi_z@@3PAP6AXXZA @ 31 NONAME ; void (* *__xi_z)(void)
	?__xp_a@@3PAP6AXXZA @ 32 NONAME ; void (* *__xp_a)(void)
	?DEListHead@@3PAUSDestructorEntry@@A @ 33 NONAME ; struct SDestructorEntry * DEListHead
	?__xt_z@@3PAP6AXXZA @ 34 NONAME ; void (* *__xt_z)(void)
	??_7Msrs@@6B@~ @ 35 NONAME ; const Msrs::`vftable'
	?__xp_z@@3PAP6AXXZA @ 36 NONAME ; void (* *__xp_z)(void)
	?initDecoder@Msrs@@QAE_NXZ @ 37 NONAME ; bool Msrs::initDecoder(void)
	?instance@Msrs@@0PAV1@A @ 38 NONAME ; class Msrs * Msrs::instance
	?pause@Msrs@@AAEXPAD@Z @ 39 NONAME ABSENT ; void Msrs::pause(char *)
	?sleep_msec@Msrs@@AAEXH@Z @ 40 NONAME ; void Msrs::sleep_msec(int)
	?setConfig@Msrs@@QAA_NPAUcmd_ln_s@@PBUarg_s@@HZZ @ 41 NONAME ; bool Msrs::setConfig(struct cmd_ln_s *, struct arg_s const *, int, ...)
	?startLiveDecoding@Msrs@@QAE_NXZ @ 42 NONAME ; bool Msrs::startLiveDecoding(void)
	?recognize_from_microphone@Msrs@@AAEXXZ @ 43 NONAME ; void Msrs::recognize_from_microphone(void)
	?getInstance@Msrs@@SAPAV1@XZ @ 44 NONAME ; class Msrs * Msrs::getInstance(void)
	?sighandler@Msrs@@AAEXH@Z @ 45 NONAME ; void Msrs::sighandler(int)
	?isLiveDecoding@Msrs@@QBE_NXZ @ 46 NONAME ; bool Msrs::isLiveDecoding(void) const
	?setLiveDecoding@Msrs@@QAEX_N@Z @ 47 NONAME ; void Msrs::setLiveDecoding(bool)
	??0Subject@@IAE@XZ @ 48 NONAME ; Subject::Subject(void)
	??1?$_STLP_alloc_proxy@PAPAVObserver@@PAV1@V?$allocator@PAVObserver@@@std@@@std@@QAE@XZ @ 49 NONAME ; std::_STLP_alloc_proxy<class Observer * *, class Observer *, class std::allocator<class Observer *> >::~_STLP_alloc_proxy<class Observer * *, class Observer *, class std::allocator<class Observer *> >(void)
	??1?$_Vector_base@PAVObserver@@V?$allocator@PAVObserver@@@std@@@std@@QAE@XZ @ 50 NONAME ; std::_Vector_base<class Observer *, class std::allocator<class Observer *> >::~_Vector_base<class Observer *, class std::allocator<class Observer *> >(void)
	??1?$allocator@PAVObserver@@@std@@QAE@XZ @ 51 NONAME ; std::allocator<class Observer *>::~allocator<class Observer *>(void)
	??1?$vector@PAVObserver@@V?$allocator@PAVObserver@@@std@@@std@@QAE@XZ @ 52 NONAME ; std::vector<class Observer *, class std::allocator<class Observer *> >::~vector<class Observer *, class std::allocator<class Observer *> >(void)
	??1Subject@@UAE@XZ @ 53 NONAME ; Subject::~Subject(void)
	??_ESubject@@UAE@I@Z @ 54 NONAME ; Subject::~Subject(unsigned int)
	?Attach@Subject@@UAEXPAVObserver@@@Z @ 55 NONAME ; void Subject::Attach(class Observer *)
	?Detach@Subject@@UAEXPAVObserver@@@Z @ 56 NONAME ; void Subject::Detach(class Observer *)
	?Notify@Subject@@UAEXXZ @ 57 NONAME ; void Subject::Notify(void)
	?NotifyNewSentece@Subject@@UAEXXZ @ 58 NONAME ; void Subject::NotifyNewSentece(void)
	?_Construct@?$@PAVObserver@@PAV1@@std@@YAXPAPAV1@ABQAV1@@Z @ 59 NONAME ; void std::_Construct<class Observer *, class Observer *>(class Observer * *, class Observer * const const &)
	?_M_insert_overflow@?$vector@PAVObserver@@V?$allocator@PAVObserver@@@std@@@std@@IAEXPAPAVObserver@@ABQAV3@ABU__true_type@2@I_N@Z @ 60 NONAME ; void std::vector<class Observer *, class std::allocator<class Observer *> >::_M_insert_overflow(class Observer * *, class Observer * const const &, struct std::__true_type const &, unsigned int, bool)
	?getLastSentence@Msrs@@QAEPBDXZ @ 61 NONAME ; char const * Msrs::getLastSentence(void)
	?getloc@ios_base@std@@QBE?AVlocale@2@XZ @ 62 NONAME ABSENT ; class std::locale std::ios_base::getloc(void) const
	?setLastSentence@Msrs@@QAEXPBD@Z @ 63 NONAME ; void Msrs::setLastSentence(char const *)
	?stopLiveDecoding@Msrs@@QAEXXZ @ 64 NONAME ; void Msrs::stopLiveDecoding(void)
	??_R0?AVSubject@@@8~ @ 65 NONAME ; class Subject `MW RTTI Type Descriptor'
	??_7Subject@@6B@~ @ 66 NONAME ; const Subject::`vftable'
	?_S_swap_lock@?$_Swap_lock_struct@$0A@@std@@2U_STLP_mutex_base@2@A @ 67 NONAME ABSENT ; struct std::_STLP_mutex_base std::_Swap_lock_struct<0>::_S_swap_lock
	_InitializeThreadDataIndex @ 68 NONAME ABSENT

